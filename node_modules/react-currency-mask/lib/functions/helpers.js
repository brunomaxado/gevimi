"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maskValues = exports.normalizeValue = exports.clearNumber = void 0;
const decimals_1 = require("../constants/decimals");
const format_1 = require("./format");
const clearNumber = (number) => {
    if (typeof number === 'number') {
        return number;
    }
    // strips everything that is not a number (positive or negative)
    return Number(number.toString().replace(/[^0-9-]/g, ''));
};
exports.clearNumber = clearNumber;
const normalizeValue = (number) => {
    let safeNumber = number;
    if (typeof number === 'string') {
        safeNumber = (0, exports.clearNumber)(number);
        if (safeNumber % 1 !== 0) {
            safeNumber = safeNumber.toFixed(decimals_1.MAXIMUM_FRACTION_DIGITS);
        }
    }
    else {
        // all input numbers must be a float point (for the cents portion). This is a fallback in case of integer ones.
        safeNumber = Number.isInteger(number)
            ? Number(number) * 10 ** decimals_1.MAXIMUM_FRACTION_DIGITS
            : number.toFixed(decimals_1.MAXIMUM_FRACTION_DIGITS);
    }
    // divide it by 10 power the maximum fraction digits.
    return (0, exports.clearNumber)(safeNumber) / 10 ** decimals_1.MAXIMUM_FRACTION_DIGITS;
};
exports.normalizeValue = normalizeValue;
const maskValues = (locale, inputFieldValue, currency, shouldCutSymbol) => {
    if (!inputFieldValue)
        return [0, ''];
    const value = (0, exports.normalizeValue)(inputFieldValue);
    const maskedValue = (0, format_1.formatCurrency)(locale, value, currency, shouldCutSymbol);
    return [value, maskedValue];
};
exports.maskValues = maskValues;
