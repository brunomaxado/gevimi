"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable react/display-name */
const react_1 = require("react");
const react_2 = require("react");
const helpers_1 = require("./functions/helpers");
exports.CurrencyInput = (0, react_2.forwardRef)(({ InputElement, value, defaultValue, hideSymbol = false, currency = 'BRL', locale = 'pt-BR', max, autoSelect, autoReset, onChangeValue, onBlur, onFocus, onKeyPress, ...otherProps }, ref) => {
    const [maskedValue, setMaskedValue] = (0, react_2.useState)(() => {
        if (!value)
            return '0';
        const [, calculatedMaskedValue] = (0, helpers_1.maskValues)(locale, value, currency, hideSymbol);
        return calculatedMaskedValue;
    });
    const updateValues = (originalValue) => {
        const [calculatedValue, calculatedMaskedValue] = (0, helpers_1.maskValues)(locale, originalValue, currency, hideSymbol);
        if (!max || calculatedValue <= max) {
            setMaskedValue(calculatedMaskedValue);
            return [calculatedValue, calculatedMaskedValue];
        }
        return [(0, helpers_1.normalizeValue)(maskedValue), maskedValue];
    };
    const handleChange = (event) => {
        event.preventDefault();
        const [originalValue, maskedValue] = updateValues(event.target.value);
        onChangeValue(event, originalValue, maskedValue);
    };
    const handleBlur = (event) => {
        const [originalValue, maskedValue] = updateValues(event.target.value);
        if (autoReset) {
            (0, helpers_1.maskValues)(locale, 0, currency, hideSymbol);
        }
        if (onBlur) {
            onBlur(event, originalValue, maskedValue);
        }
    };
    const handleFocus = (event) => {
        if (autoSelect) {
            event.target.select();
        }
        const [originalValue, maskedValue] = updateValues(event.target.value);
        if (maskedValue && onFocus) {
            onFocus(event, originalValue, maskedValue);
        }
    };
    const handleKeyUp = (event) => onKeyPress && onKeyPress(event, event.key, event.key);
    (0, react_2.useEffect)(() => {
        const currentValue = value || defaultValue || undefined;
        const [, maskedValue] = (0, helpers_1.maskValues)(locale, currentValue, currency, hideSymbol);
        setMaskedValue(maskedValue);
    }, [currency, defaultValue, hideSymbol, value]);
    if (!InputElement) {
        return ((0, jsx_runtime_1.jsx)("input", { ...otherProps, ref: ref, value: maskedValue, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, onKeyUp: handleKeyUp }));
    }
    return (0, react_1.cloneElement)(InputElement, {
        ...otherProps,
        ref,
        value: maskedValue,
        onChange: handleChange,
        onBlur: handleBlur,
        onFocus: handleFocus,
        onKeyUp: handleKeyUp,
    });
});
